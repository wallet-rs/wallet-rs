name: Rust
on:
  push:
    branches:
      - main
  pull_request:
  merge_group:
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
env:
  RUSTFLAGS: -D warnings
  CARGO_TERM_COLOR: always
jobs:
  rust:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          # - os: ubuntu-latest
          #   target: x86_64-linux-android 
          - os: macos-latest
            target: x86_64-apple-ios
          - os: macos-latest
            target: x86_64-apple-darwin
          # - os: windows-latest
          #   target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    steps:
      - name: Fetch Head
        uses: actions/checkout@v3
      - name: Install Rust Toolchain (nightly)
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt, clippy
          target: ${{ matrix.target }}
      - name: Rust Cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/            
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: Rust Format Check
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all --check
      - name: License Check
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --package mpl-license-checker
      - name: Rust Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target ${{ matrix.target }}
      - name: Rust Test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --target ${{ matrix.target }}
      - name: Rust Coverage Install
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Rust Coverage
        run: |
          cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
      - name: Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          fail_ci_if_error: false
      - name: Rust Clippy Check
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings
